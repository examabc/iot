Slip 15 :

Q.1	Write a Java Program to implement Facade Design Pattern for Home Theater



1.	Subsystems (Components)

java
Copy code
// TV Class (Subsystem) public class TV {
public void on() { System.out.println("Turning on the TV.");
}
 
public void off() { System.out.println("Turning off the TV.");
}
}

// SoundSystem Class (Subsystem) public class SoundSystem {
public void on() {
System.out.println("Turning on the sound system.");
}

public void off() {
System.out.println("Turning off the sound system.");
}

public void setVolume(int volume) {
System.out.println("Setting sound system volume to " + volume);
}
}

// Lights Class (Subsystem) public class Lights {
public void dim() { System.out.println("Dimming the lights.");
}

public void on() {
System.out.println("Turning on the lights.");
}
}

// DVDPlayer Class (Subsystem) public class DVDPlayer {
public void on() {
System.out.println("Turning on the DVD player.");
}

public void off() {
System.out.println("Turning off the DVD player.");
}

public void play() { System.out.println("Playing the DVD.");
}

public void stop() { System.out.println("Stopping the DVD.");
}
}

2.	Facade Class

java
Copy code
// HomeTheaterFacade Class (Facade) public class HomeTheaterFacade {
 
private TV tv;
private SoundSystem soundSystem; private Lights lights;
private DVDPlayer dvdPlayer;

public HomeTheaterFacade(TV tv, SoundSystem soundSystem, Lights lights, DVDPlayer dvdPlayer) {
this.tv = tv;
this.soundSystem = soundSystem; this.lights = lights; this.dvdPlayer = dvdPlayer;
}

public void watchMovie() {
System.out.println("Get ready to watch a movie..."); lights.dim();
tv.on(); soundSystem.on();
soundSystem.setVolume(10); dvdPlayer.on(); dvdPlayer.play();
}

public void endMovie() {
System.out.println("Shutting down the movie..."); dvdPlayer.stop();
dvdPlayer.off(); soundSystem.off(); tv.off();
lights.on();
}
}

3.	Client Code (Test)

java
Copy code
// Client Code (Main)
public class FacadePatternTest {
public static void main(String[] args) {
// Creating instances of subsystems (components) TV tv = new TV();
SoundSystem soundSystem = new SoundSystem(); Lights lights = new Lights();
DVDPlayer dvdPlayer = new DVDPlayer();

// Creating the facade
HomeTheaterFacade homeTheater = new HomeTheaterFacade(tv, soundSystem, lights, dvdPlayer);

// Using the facade to simplify the process of watching a movie homeTheater.watchMovie();

System.out.println("\n--- Movie finished ---\n");

// Using the facade to end the movie and turn off the systems
 
homeTheater.endMovie();
}
}

Explanation:

1.	Subsystem Classes: These classes (TV, SoundSystem, Lights, and DVDPlayer) represent the individual components of the home theater system. Each class has methods to control its respective functionality, such as turning on/off, adjusting volume, or playing a DVD.
2.	Facade Class (HomeTheaterFacade): This class provides a simplified interface to control all the components of the home theater system. It has methods
like watchMovie() and endMovie() that internally call the appropriate methods on the subsystem objects. The facade hides the complexity of interacting with each component.
3.	Client Code: In the FacadePatternTest class, we create instances of the subsystems (TV, SoundSystem, Lights, and DVDPlayer) and pass them to the HomeTheaterFacade. The client can then simply call watchMovie() or endMovie() without needing to deal with the individual components of the system.

Output:

vbnet Copy code
Get ready to watch a movie... Dimming the lights.
Turning on the TV.
Turning on the sound system. Setting sound system volume to 10 Turning on the DVD player.
Playing the DVD.
--- Movie finished --- Stopping the DVD.
Turning off the DVD player. Turning off the sound system. Turning off the TV.
Turning on the lights.



Q.2	Write a program to sense a finger when it is placed on the board Arduino. [15 M] #define TOUCH_SENSOR_PIN 8 // Pin for the capacitive touch sensor
#define LED_PIN 13	// Pin for the LED (optional)

void setup() {
// Initialize the touch sensor pin as input pinMode(TOUCH_SENSOR_PIN, INPUT);
 

// Initialize the LED pin as output pinMode(LED_PIN, OUTPUT);

// Start the Serial Monitor Serial.begin(9600);
}

void loop() {
// Read the state of the touch sensor
int sensorState = digitalRead(TOUCH_SENSOR_PIN);

// Check if a finger is placed on the sensor
if (sensorState == LOW) { // TTP223 sensor returns LOW when touched Serial.println("Finger detected!");
digitalWrite(LED_PIN, HIGH); // Turn on LED (if connected)
} else {
Serial.println("No finger detected."); digitalWrite(LED_PIN, LOW); // Turn off LED
}

// Delay before the next reading
delay(100); // Delay for 100ms before checking again
}




Slip 16 :

Q.1	Write a Java Program to implement Observer Design Pattern for number conversion. Accept a number in Decimal form and represent it in Hexadecimal, Octal and Binary. Change the Number and it reflects in other forms also



1.	Observer Interface

java
Copy code
// Observer Interface public interface Observer {
void update(int decimalNumber);
}

2.	Concrete Observers (Hexadecimal, Octal, Binary)
 
java
Copy code
// Concrete Observer for Hexadecimal format
public class HexadecimalObserver implements Observer { @Override
public void update(int decimalNumber) { System.out.println("Hexadecimal: " +
Integer.toHexString(decimalNumber).toUpperCase());
}
}

// Concrete Observer for Octal format
public class OctalObserver implements Observer { @Override
public void update(int decimalNumber) {
System.out.println("Octal: " + Integer.toOctalString(decimalNumber));
}
}

// Concrete Observer for Binary format
public class BinaryObserver implements Observer { @Override
public void update(int decimalNumber) { System.out.println("Binary: " +
Integer.toBinaryString(decimalNumber));
}
}

3.	Subject (DecimalNumber)

java
Copy code
// Subject that holds the decimal number and notifies observers import java.util.ArrayList;
import java.util.List;

public class DecimalNumber { private int decimalNumber;
private List<Observer> observers = new ArrayList<>();

// Attach an observer
public void attach(Observer observer) { observers.add(observer);
}

// Detach an observer
public void detach(Observer observer) { observers.remove(observer);
}

// Set the decimal number and notify observers public void setDecimalNumber(int decimalNumber) {
this.decimalNumber = decimalNumber; notifyObservers();
}
 
// Notify all observers about the change private void notifyObservers() {
for (Observer observer : observers) { observer.update(decimalNumber);
}
}
}

4.	Main Program (Client Code)

java
Copy code
import java.util.Scanner;

public class ObserverPatternTest {
public static void main(String[] args) {
// Create the Subject (DecimalNumber) DecimalNumber decimalNumber = new DecimalNumber();

// Create the Observers
HexadecimalObserver hexObserver = new HexadecimalObserver(); OctalObserver octObserver = new OctalObserver(); BinaryObserver binObserver = new BinaryObserver();

// Attach observers to the subject decimalNumber.attach(hexObserver); decimalNumber.attach(octObserver); decimalNumber.attach(binObserver);

// Accept input from user
Scanner scanner = new Scanner(System.in); System.out.print("Enter a decimal number: "); int number = scanner.nextInt();

// Set the decimal number and update all observers decimalNumber.setDecimalNumber(number);

// Allow the user to change the number System.out.print("\nEnter a new decimal number: "); number = scanner.nextInt();

// Update observers with the new number decimalNumber.setDecimalNumber(number);

scanner.close();
}
}


Q.2	Write a program to connect with the available Wi-Fi using Arduino. [15 M] #include <ESP8266WiFi.h>  // Include the Wi-Fi library for ESP8266
 
// Replace these with your network credentials
const char* ssid = "your-SSID";	// Wi-Fi SSID (name of the Wi-Fi network) const char* password = "your-PASSWORD"; // Wi-Fi Password

void setup() {
// Start the Serial communication Serial.begin(115200);

// Connect to Wi-Fi Serial.println("Connecting to Wi-Fi...");
WiFi.begin(ssid, password); // Start the connection using SSID and password

// Wait for the connection to establish
while (WiFi.status() != WL_CONNECTED) { delay(500);
Serial.print(".");
}

// Once connected, print the local IP address Serial.println("");
Serial.println("Connected to Wi-Fi!"); Serial.print("IP Address: ");
Serial.println(WiFi.localIP()); // Print the IP address assigned to the ESP8266
}

void loop() {
// You can add additional functionality here if needed
}
